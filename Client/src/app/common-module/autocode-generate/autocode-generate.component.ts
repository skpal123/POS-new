import { Component, OnInit,Input,Output,EventEmitter, OnChanges, OnDestroy } from '@angular/core';
import { AlertBoxService } from '../../shared/alert-box.service';
import { CommonService } from '../../services/common/common.service';
import { DialogData } from '../../models/common/dialog-data.model';
import { NavigationDataService } from '../../services/common/navigation-data.service';
import { MatDialog } from '@angular/material';
import { AutoGeneratedAlertComponent } from '../auto-generated-alert/auto-generated-alert.component';
import { CodeFormater } from '../../models/admin/code-formater.model';
import { CodeFormaterEntryComponent } from '../code-formater-entry/code-formater-entry.component';

@Component({
  selector: 'app-autocode-generate',
  templateUrl: './autocode-generate.component.html',
  styleUrls: ['./autocode-generate.component.css']
})
export class AutocodeGenerateComponent implements OnInit,OnChanges,OnDestroy {
  @Input() itemName: string
  @Input()  IsSaved:boolean;
  @Input() IsAutoCode:boolean;
  codeFormater:CodeFormater={Id:null,Name:null,ItemLength:0,FromEntry:true,ItemName:null,IsSerial:true,IsTodaysDate:false,
    IsSymbol:false,SymbolName:null,Prefix:null,StartPossition:0,LastNumber:0,StringLength:0};
  @Output() getGenerateAutoCode:EventEmitter <any>=new EventEmitter <any>();
  code:string=null;
  IsCreated:boolean=false;
  //IsAutoCode:boolean=false;
  constructor(private _alertBox:AlertBoxService,
    private matDialog:MatDialog,
    private _navigationData:NavigationDataService,
    private _commonService:CommonService,) { }

  ngOnInit() {

  }
  ngOnChanges(){
    debugger
    if( this.IsAutoCode&&!this.IsSaved){
      this.getAutoCode(this.itemName)
    }
  }
  generatedAutoCode($event){
    debugger
    if($event.target.checked){
      if(!this.IsCreated){
        this.getAutoCode(this.itemName)
      }
    }
  }
  getAutoCode(itemName:string){
    this._commonService.GetAutoCodeByProductName(itemName).subscribe((response:string)=>{
      this.code=response;
      this.IsCreated=true;
      if(this.code==null||this.code=="null"){
        this.openAlertDialog();
      }
      this.getGenerateAutoCode.emit(this.code)
    },error=>{
      let dialogData=new DialogData();
      dialogData.message=error
      this._alertBox.openDialog(dialogData);
    })
  }
  ngOnDestroy(){
    debugger
    if(!this._navigationData.IsSaved&&this.IsAutoCode){
      this.resetCode(this.itemName);
    }
    this._navigationData.IsSaved=false;
  }
  resetCode(itemName:string){
    this._commonService.resetLastNumberCodeFormaterByProductName(itemName).subscribe((response:string)=>{
      
    },error=>{
      let dialogData=new DialogData();
      dialogData.message=error
      this._alertBox.openDialog(dialogData);
    })
  }
  openAlertDialog(){
    let dialogData=new DialogData();
    dialogData.message="You do not set any code formating for "+this.itemName +" or somthing wrong. Please set code format"
    const dialogRef=this.matDialog.open(AutoGeneratedAlertComponent,{
      data:dialogData,
      disableClose:true,
      height:'auto', 
      width:window.screen.width*.4+'px'
    });
    dialogRef.afterClosed().subscribe(result=>{
      if(result){
        debugger
        this.createNewCodeFormater();
      }
    })
  }
  createNewCodeFormater(){
    //this.clearCodeFormater();
    const dialogRef=this.matDialog.open(CodeFormaterEntryComponent,{
      data:this.codeFormater,
      disableClose:true,
      height:window.screen.height*.6+'px',
      width:window.screen.width*.4+'px'
    });
    dialogRef.afterClosed().subscribe(result=>{
      if(result){
       
      }
    })
  }
  clearCodeFormater(){
    this.codeFormater.Id=null;
    this.codeFormater.Name=null;
    this.codeFormater.ItemLength=null;
    this.codeFormater.ItemName=null;
    this.codeFormater.IsSerial=null;
    this.codeFormater.IsTodaysDate=null;
    this.codeFormater.IsSymbol=null;
    this.codeFormater.SymbolName=null;
    this.codeFormater.Prefix=null;
    this.codeFormater.StartPossition=null;
    this.codeFormater.LastNumber=null;
    this.codeFormater.StringLength=null;
    this.codeFormater.FromEntry=false
  }
}
